{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","services/persons.js","App.js","index.js"],"names":["Filter","filter","handleFilterChange","value","onChange","PersonForm","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","Persons","personsToShow","handleDeleteClick","map","person","i","key","name","number","onClick","id","Notification","message","className","text","baseUrl","axios","get","then","response","data","newObject","post","put","delete","statusText","App","useState","persons","setPersons","setNewName","setNewNumber","setPersonsToShow","setFilter","setMessage","useEffect","personService","initialPersons","event","term","target","filteredList","toLowerCase","startsWith","preventDefault","undefined","find","returnedAllPersons","messageObject","setTimeout","alert","window","confirm","updatedPerson","returnedPerson","arr","index","indexOf","catch","error","splice","deletePerson","parseInt","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a7f5ffc.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = ({filter, handleFilterChange}) => {\n  return (\n    <div>\n      filter shown with <input value={filter} onChange={handleFilterChange} />\n    </div>\n  )\n}\n\nexport default Filter","import React from 'react'\n\nconst PersonForm = (\n  { \n    addPerson, \n    newName, \n    handleNameChange, \n    newNumber, \n    handleNumberChange \n  }) => {\n  \n  return (\n    <form onSubmit={addPerson}>\n    <div>name: <input value={newName} onChange={handleNameChange} /></div>\n    <div>number: <input value={newNumber} onChange={handleNumberChange} /></div>\n    <div><button type=\"submit\">add</button></div>\n  </form>\n  )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Persons = ({ personsToShow, handleDeleteClick }) => {\n  return (\n    <div>\n      {personsToShow.map((person, i) =>\n        <p key={person.name}>\n          {person.name} {person.number} <button \n                                          onClick={handleDeleteClick}\n                                          value={person.id}\n                                        >delete</button>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Persons","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message.type === null) {\n    return null\n  }\n\n  return (\n    <div className={message.type}>\n      {message.text}\n    </div>\n  )\n}\n\nexport default Notification","import axios from 'axios'\n\n// Because, in this case, FE and BE locates on the\n// same address, we can define base-url as relative. \nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.statusText)\n}\n\nexport default { getAll, create, update, remove }","import React, { useState, useEffect } from 'react'\nimport './index.css'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Notification from './components/Notification'\nimport personService from './services/persons'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ personsToShow, setPersonsToShow ] = useState([])\n  const [ filter, setFilter ] = useState('')\n  const [ message, setMessage ] = useState({type: null, text: null})\n\n  // Get phonebook data from server using effect hook\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n        setPersonsToShow(initialPersons)\n      })\n  }, [])\n  \n  const addPerson = (event) => {\n    event.preventDefault()\n\n    // New person is added to phonebook only if s/he doesn't exist in there yet.\n    // Convert both names to lower case in order to ensure the same format.  \n    if (persons.find( ({ name }) => name.toLowerCase() === newName.toLowerCase() ) === undefined ) {\n\n      // Both input fields needs to be filled\n      if (newName !== '' && newNumber !== '') {\n\n        const personObject = {\n          name: newName,\n          number: newNumber\n        }\n        \n        personService\n          .create(personObject)\n          .then(returnedAllPersons => {\n            // Display info message\n            const messageObject = {...message, type: 'info', text: `Added record '${newName}'`}\n            setMessage(messageObject)\n            setTimeout(() => {\n              setMessage({type: null, text: null})\n            }, 3000)\n\n            // Update persons state\n            setPersons(returnedAllPersons)\n\n            // Reset person filter; show all persons\n            setPersonsToShow(returnedAllPersons)\n\n            // Reset all input fields\n            setFilter('')\n            setNewName('')\n            setNewNumber('')\n          })\n\n      // Missing input details -> no update, raise alert.\n      } else {\n        alert('You need to provide both name and number.')\n      }\n\n    // Name exists in phonebook already -> ask update. \n    } else {\n\n      // Confirm update.\n      const result = window.confirm(\n          `${newName} is already added to phonebook, replace the old number with a new one?`\n        )\n      \n      // User confirmed update -> make HTTP PUT request in order to update data on server.\n      if (result) {\n\n        // Get person object that is wanted to be updated.\n        const person = persons.find(({name}) => name.toLowerCase() === newName.toLowerCase())\n        const updatedPerson = { ...person, number: newNumber }\n\n        personService\n          .update(person.id, updatedPerson)\n          .then(returnedPerson => {\n            // Display info message\n            const messageObject = {...message, type: 'info', text: `Updated record '${newName}'`}\n            setMessage(messageObject)\n            setTimeout(() => {\n              setMessage({type: null, text: null})\n            }, 3000)\n\n            // Take a copy of current person array in order to avoid mutating the state directly.\n            const arr = [...persons]\n\n            // Update details in person array and reset all input fields.\n            const index = arr.indexOf(person)\n            if (index > -1 ) {\n              arr[index] = updatedPerson\n              setPersons(arr)\n              setPersonsToShow(arr)\n              setFilter('')\n              setNewName('')\n              setNewNumber('') \n            }\n          })\n          .catch(error => {\n            const messageObject = {...message, type: 'error', text: `Record '${newName}' has already been removed from server'`}\n            setMessage(messageObject)\n            setTimeout(() => {\n              // Clear error message after 3 seconds\n              setMessage({type: null, text: null})\n\n              // Delete entry, that was removed from the server, also from local list.\n              const arr = [...persons]\n              const index = arr.indexOf(person)\n              if (index > -1 ) { \n                arr.splice(index, 1)\n                setPersons(arr)\n                setPersonsToShow(arr)\n                setFilter('')\n                setNewName('')\n                setNewNumber('') \n              }\n            }, 3000)\n          })\n      } \n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    const term = (event.target.value)\n    setFilter(term)\n    \n    // Apply filter based on given term and form a new filtered array.\n    const filteredList = persons.filter( ({ name }) => name.toLowerCase().startsWith(term.toLowerCase()) )\n    setPersonsToShow(filteredList) \n  }\n\n  const handleDeleteClick = (event) => {    \n    \n    // Get person object that is wanted to delete.\n    const deletePerson = persons.find(({id}) => parseInt(id) === parseInt(event.target.value))\n    \n    // Confirm delete from user.\n    const result = window.confirm(`Delete ${deletePerson.name}?`)\n    \n    // User confirmed delete -> make HTTP DELETE request and update persons list.\n    if (result) {\n      personService\n        .remove(deletePerson.id)\n        .then(response => {          \n          // Display info message\n          const messageObject = {...message, type: 'info', text: `Removed record '${deletePerson.name}'`}\n          setMessage(messageObject)\n          setTimeout(() => {\n            setMessage({type: null, text: null})\n          }, 3000)\n          \n          const arr = [...persons]\n          const index = arr.indexOf(deletePerson)\n          if(index > -1) { \n            arr.splice(index, 1)\n            setPersons(arr)\n            setPersonsToShow(arr) \n          }\n        })\n    } \n  }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification message={message} />\n      <Filter\n        filter={filter}\n        handleFilterChange={handleFilterChange} \n      />\n      <h2>add a new</h2>\n      <PersonForm \n        addPerson={addPerson} \n        newName={newName} \n        handleNameChange={handleNameChange} \n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons \n        personsToShow={personsToShow} \n        handleDeleteClick={handleDeleteClick}\n      />\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}